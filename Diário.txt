================================================================================
04/11/2017 22:05
	Trabalho inicializado, embora o professor ainda não entregou a proposta
do projeto.
	Foi inicializado o arquivo estruturas.h e implementadas as funções:
	var_elemento*  aloca_elemento(void);

	var_lista*     aloca_lista   (void);

	void           free_lista    (var_lista* lista);

	bool           lista_vazia   (var_lista* lista);

	void           insere_final  (void* info, var_lista* lista, int codigo);

	void           deleta_ultimo (var_lista* lista);

	void           print_lista   (var_lista* lista, int codigo);
================================================================================
06/11/2017 10:00
	Foram depuradas as funções escritas já escritas, com gdb e valgrind, no início do dia.
	Erro encontrado:
		'aloca_elemento', conforme especificado, inicia os ponteiros com valor
		"NULL", portanto tentar escrever no endereço "NULL" gera uma falha de
		segmentação.
		Correção:
			inserir o comando "elemento->dados = (void*) malloc(sizeof(int));"
	Erro encontrado:
		'insere_final' foi chamado com o código de inserção de var_elemento,
		entretanto,	recebe um (void*).
		Correção:
			inserir "elemento" como parâmetro ao invés de "elemento->dados"
	Comportamento não desejado:
		Função 'print_lista' imprime índices de forma decrescente.
		Correção:
			"indice" é inicializado com valor 0 e "indice++" é substituído por
			"++indice"
	Comportamento não desejado:
		A função 'insere_final' independente do comando, vincula a informação
		com o ponteiro, ou seja, se na origem da chamada da função eu liberar
		a memória do parâmetro enviado a função ele libera a informação na
		lista.
		Correção temporária:
			Os parâmetros informados devem ser "presenteados" a função,
			não havendo nenhuma modificação àquela área de memória posterior
			a chamada da função.
	Erro encontrado:
		'free_lista' não considera áreas de memória alocadas dinamicamente
		dependentes, ou seja, que estão ligadas ao "var_elemento"
		Correção:
			inserir a linha "free(cursor->dados);" antes de "free(cursor);"
	Erro encontrado:
		Erro de natureza semelhante ao anterior encontrado em 'deleta_ultimo'
		Correção:
			inserir a linha "if(lista->ultimo->dados != NULL)
			{free(lista->ultimo->dados);}" antes de "free(lista->ultimo);"
	Ao final da tarde, foi inicializada a implementação de uma função para terceirizar
	o processo de alocação de memória para os principais tipos usados
	durante a solução do problema.
	Entretanto, devido julgado estéticamente feio e pouco prático, foi retirada.
================================================================================
08/11/2017 17:00
	Recebido o pedido para o trabalho ontem.
	A definição de lista simplemente encadeada implementada será modificada
	para uma lista duplamente encadeada:

	typedef struct elemento{
		void* dados;
		struct elemento* anterior;
	    struct elemento* proximo;
	} var_elemento;

	Incluindo modificações nas seguintes funções:
	var_elemento*	aloca_elemento (void)

	void			insere_final (void* info, var_lista* lista, int codigo);

	Ampliando a função 'insere_final' surgiu:
	void			insere (int finalouinicio, void* info, var_lista* lista,
 int codigo);

	Começo da implementação da biblioteca 'character.h'
================================================================================
12/11/2017 15:30
	Criado um repositório:
	https://github.com/thaleslim/GameGoT.git

	Pretende-se depurar as seguintes funções:
	t_node*     node_create(void);

	t_node*     tree_create(void);

	t_node*     aloca_arvore(int total_de_nos);

	void        tree_free(t_node* tree);

	void        tree_print_preorder(t_node* root);

	Cada estrutura de dados foi compartimentada em seu próprio
	cabeçalho.
	Observação: existe a possibilidade,apesar de minima, de existirem erros de construção
	  			da estrutura de árvore.
================================================================================
16/11/2017 14:30
	Objetivos: implementar a estrutura de fila
	usando listas duplamente encadeadas.
	Testar modificações para
	generalizar o comportamento de inserir adicionando
	uma variável, que seria a quantidade de bytes da
	informação que o usuário quer inserir.
	E começar a implementar funções mais específicas de
	modelagem do jogo.
================================================================================
17/11/2017 18:00
	Objetivos:  Depurar estrutura de fila;
				Atualizar git repositório;
				Voltar a desenvolver funções mais especificas do jogo em si.
	Erro: 'insere_lista' causa vazamento de memória
		Correção: usar chaves para abranger as 2 linhas de código
				do elseif caso contrário "memcpy(elemento, info, size_of_memory);"
				é executado todas as vezes.
	Comportamento não desejado: 'sair_fila' retorna um 'var_elemento'
		Correção: adicionar as seguintes ações"void *resultado=elemento->dados;
				free(elemento);"
	Estética: substituir LISTA VAZIA por VAZIA
			Como estamos usando print_lista para mais de uma estrutura, faz mais
			sentido dessa forma.
================================================================================
18/11/2017 12:15
	Objetivos:	Começar a modelar o gameloop
				Implementar funções de busca e impressão na árvore
	Criado o arquivo Sketch.c
	Esse arquivo contém o que imagina-se que seja necessário para
	a montagem do gameloop.
================================================================================
22/11/2017 21:56
	Objetivos:	Testar character_create()
				Implementar LoadFromFile(), função mencionada em sketch.c
	Resultados do dia:

	Character* character_create(char* _name, char* _house, int _agility,
	int _strength, int _intelligence, int _health);

	void       character_free(Character* character);

	Character* fight(Character* fighter_one, Character* fighter_two,
	int atribute);

	void       print_character(Character* character, void* nerfs_n_buffs);

	Funções implementadas e testadas, entretanto print_character()
	será expandida para facilitar o trabalho de impressão levando
	em consideração dinâmicas do jogo, nesse caso imprimir
	"X) XXXXXX: XX" no atributo "exaurido" pelo usuário na batalha
	anterior.

	Testes realizados usando as seguintes estruturas Character:
	KungLao, Lao, 100, 30, 20, 100
	ChunLee, Lee, 15, 100, 100, 20
================================================================================
24/11/2017 20:53
	Sucesso obtido na leitura do arquivo personagens,
	havia encontrado alguma dificuldade devido o código
	não estar preparado para lidar com o char '\r'
	(Return Carriage); e não compreender completamente
	o retorno da função fscanf().
	Comportamento não desejado:
		Ainda não se sabe a abrangência desse caso, entretanto foi descoberto
		que ao usarmos as funções de liberação (free_lista(),
		character_free(), etc) não excluímos o potencial para erros
		secundários, já que os ponteiros passados como argumentos,
		passam a apontar para uma área de memória previamente libe-
		rada, ou seja, existe a possibilidade de acessos indevidos.
		Correção:
			As funções de liberação passam a retornar o ponteiro NULL
			Exceto character_free(), já que foi especificado pelo
			trabalho o seu comportamento, nesse caso recomendo cautela.
================================================================================
25/11/2017 11:15
	Objetivos:	Depurar funções criadas ontem
				Revisar documentação
				Avançar no gameloop
	Foi criado um padrão para ajudar, todo arquivo de cabeçalho
	tem em sua primeira um link para o manual do Doxygen
	Depois foram organizados todos os Smoketest e Checklist em uma pasta com seu próprio
	makefile.
	Foram removidos todos os SmokeTests e Checklists do Diário, com o objetivo de
	deixá-lo mais objetivo.
	IDEIAS: Usar arquivo texto para armazenar as informações dos rounds;
			Criar função que esvazia a lista e que receba um sinal que lhe
			informe sobre a liberação da memória de var_elemento;
================================================================================
26/11/2017 20:52
	Implementada função de esvaziar a lista, pop_lista,free_elemento
	e random_roullete, sendo que essa última ainda está causando vazamentos
	de memória ainda não compreendidos.
	IDEIA: é possivel que a memória vazada seja elemento::dados
================================================================================
26/11/2017 16:30
	Erro:	random_roullete() não considera que insere_lista() faz uma
			cópia do elemento
			Correção:	alocar uma variável temporária que irá receber
						o ponteiro de pop_lista() para posteriormente liberar.
	Objetivos: continuar avançando no gameloop
	Resumo do dia:
		Implementadas as funções random_roullete e LoadFighters;
		Para isso, fora criada uma função que enfileira as folhas de uma árvore
		Corrigido um detalhe na função de esvaziar_lista(): o ponteiro ultimo
			ainda apontava para uma área de memória previamente liberada
		Corrigido também um detalhe na função sair_fila() : ela não respondia
			bem no caso em que var_lista::tamanho = 1
		Criada uma função chamada pop_lista, para trabalhar com random_roullete
	Falhas: Os comentários e Smoketests estão um pouco de lado, para tentar
			avançar mais rapidamente no desenvolvimento, necessita-se voltar com
			esse hábito e também é preciso realizar as seguintes ações:
			-> atualizar funções de liberação para retornar ponteiro NULL
			-> expandir função print_character() para usar nerfs_n_buffs
			-> a função tree_free() também tem que liberar a memória de
				seus Character
				IDEIA: criar função node_free() para terceirizar o trabalho
						de liberação.
				IDEIA: usar função que enfileira_folhas, liberar as areas de
					   Character e depois ir liberando a arvore.
	Voltar a programar o Doxygen urgentemente.
================================================================================
28/11/2017 22:36
	Inicializou-se a dedicação com respeito à parte de armazenar as informações dos rounds.
	Decidido usar um arquivo (rounds.txt) para tal.
	O arquivo só será apagado antes de ser usado novamente, dessa forma
	o usuário pode ter acesso ao último round jogado.

	Funções que precisam ser comentadas ou atualizadas o comportamento:
		#Informacoes Uso Geral
			limpa_buffer() OK
			print_file() OK
		#Character
			free_listaCharacter() OK
			update_rounds() OK
			loadFromFile() OK
			loadFighters() OK
		#lista
			free_elemento() OK
			pop_lista() OK
			esvazia_lista() OK
			random_roullete() OK
		#Arvore
			enfileira_folhas() OK
	Implementadas as funções:
		update_rounds() para armazenar cada luta no arquivo.
		print_file() para imprimir todos os char dentro de um arquivo.
================================================================================
29/11/2017 08:50
	Objetivos:  1)Testar lógica de vetor para facilitar o trabalho
				 com ponteiro para atributo em update_rounds().
				2)Implementar round_anterior().
				3)Implementar character_selection():
					Atualizar print_character();
					Criar função de busca na lista;
				4)Implementar esta_vivo():
					Implementar função de busca na árvore;
				5)Verificar comportamento:
					Funções de free;
					Testar random_roullete com quantidade == lista::tamanho;
					Testar tree_print_preorder();
				6)Escrever mais Smoketests.
	1) Lógica de vetor funcionou;
	2)
================================================================================
01/12/2017 21:55
	IDEIAS de melhorias:
		tree_create() poderia trabalhar com criação baseada em niveis
			ao invés de quantidade de nós.
		enfileira_folhas() e round_anterior() poderia usar busca_pai() e um booleano
			auxiliar para evitar acesso "feio" ex: no->left->character
	Testar função de busca_pai();
	Função busca_pai() funcionou;
	Será testado usá-la para acabar com as funções com SELO GAMBIARRA;
	enfileira_folhas() implementada usando busca_pai();
================================================================================
02/12/2017 07:49
	Função round_anterior() funciona;
	Smoketests e checklist atualizados;
	Ampliado os modos de impressão de Character;
	Segundo os objetivos do dia 29/11/2017:
	2) round_anterior() implementado com "excitacao de nó".
	3) character_selection() implementada:
		print_character() com 2 modos de impressão:
			PRINT_FULL: imprime todas as informações do personagem, de acordo
						com as restrições de escolha ("atributos exauridos").
			PRINT_LINE: imprime em uma linha as informações do personagem,
						selecionando randomicamente um dos atributos para
						mostrar ao usuário.
		busca_lista() com 3 modos:
			POSICAO: quando vc informa a posição do elemento procurado;
			INFORMACAO: quando só temos que comparar elemento::dados com a
						informação;
			INFORMACAO_ROUND: quando a lista tem elemento::dados t_node**;
	4) esta_vivo() implementada.
	5) Verificar comportamento:
		Funções de free; NÃO FEITO
		Testar random_roullete com quantidade == lista::tamanho; NÃO FEITO
		Testar tree_print_preorder(); TESTADO COM SUCESSO.

	Falta implementar update_nerfs() e alguns detalhes;
	Observação: battle_round não está usando um comportamento 100% ideal

================================================================================
03/12/2017 08:30
	Objetivos:	Implementar update_nerfs(); OK
				Criar biblioteca "battle.h" para separar
					algumas funções da "character.h"; OK
				Criar biblioteca "menu.h"; OK
					main_menu(); OK
					character_selection(); OK
					gameloop(); OK
					print_last_tournament();
					exit_game(); OK
				Criar pasta separando arquivos principais do executável; OK
				Documentar o código;
	Se loadFromFile retornar NULL finalizar gameloop; OK
	É intencional que o arquivo "rounds.txt" não seja excluído
	ao final do gameloop;
	Ampliar depuração do input do usuário; OK

	Testar random_roullete com quantidade == lista::tamanho;
	com if(...){return NULL} permitindo isso
	Resultado: Erro exceção de ponto flutuante;
	break lista_dupla.c:random_roullete

	Objetivos da noite: Revisar funções de free e seus usos;
						Tentar compreender esse erro com random_roullete();
	
